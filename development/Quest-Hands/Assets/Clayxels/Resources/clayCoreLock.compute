#pragma kernel compute0
#pragma kernel compute2
#pragma kernel compute4
#pragma kernel compute6
#pragma kernel cache4
#pragma kernel cache6
#pragma kernel genPointCloud
#pragma kernel clearChunkData
#pragma kernel debugDisplayGridPoints
#pragma kernel genMesh
#include"claySDF.compute"
RWStructuredBuffer<int2> chunkCell;RWStructuredBuffer<int4> chunkOutPoints;RWStructuredBuffer<float3> chunkOutData;RWStructuredBuffer<int4> solidsFilterIn,solidsFilterOut;StructuredBuffer<int> triangleConnectionTable;
#if DEBUGGRIDPOINTS
RWStructuredBuffer<float3> debugGridOutPoints;int debugGridSideCount;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;int numSolids=0;float chunkSize=20.;float3 chunkCenter=float3(0.,0.,0.);int outMeshIndexOffset=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int y,int f,int z,int c){return y+c*(f+c*z);}int3 f(uint f,int c){float e=c*c;uint i=f/e;f-=i*e;uint y=f/c,x=f%c;return int3(x,y,i);}uint f(float3 f){uint c=uint(f.x*255)+uint(f.y*255)*256+uint(f.z*255)*256*256;return c;}float f(float f,float i,float c){float e=max(c-abs(f-i),0.);return min(f,i)-e*e*.25f/c;}float c(float f,float i,float c){float e=abs(c),s=max(e-abs(-f-i),0.);return max(-f,i)+s*s*.25/e;}bool c(int4 f,int c){if(c>63)return false;uint e=uint(c)/32;int i=f[e],s=c-32*e;if(i>>s&1)return true;return false;}void s(uint f,inout int4 c){uint i=f/32;int s=c[i],z=f-32*i;s=s&~(1<<z);if(i==0)c.x=s;else if(i==1)c.y=s;else if(i==2)c.z=s;else if(i==3)c.w=s;}bool c(int c){return c>>0&1;}float c(float3 i,float y,int x,int4 z,float r){float e=1e+10;int k=0;for(int S=0;S<numSolids;++S){if(!c(z,S)){continue;}float u=solidsBlend[S],M=computeClayDistanceFunction(solidsType[S],i,solidsPos[S],solidsRot[S],solidsScale[S],solidsAttrs[S]);if(!c(solidsAttrs[S].w)){if(u==0.)e=min(M,e);else if(u>0.)e=f(M,e,u);else e=c(M,e,u);}if(M>r)s(S,z);r-=abs(u);}if(abs(e)<=y)solidsFilterOut[x]=z;return e;}float f(float3 i,float y,out int x,out float3 s,int4 z){float e=1e+10;s=float3(1.,1.,1.);for(int r=0;r<numSolids;++r){if(!c(z,r)){continue;}float u=solidsBlend[r];float3 M=solidsColor[r];float4 t=solidsAttrs[r];float S=computeClayDistanceFunction(solidsType[r],i,solidsPos[r],solidsRot[r],solidsScale[r],t);if(S<e)x=r;bool k=c(t.w);if(u==0.){float D=clamp((e-S)/(y*2.),0.,1.);s=lerp(s,M,D);if(!k)e=min(S,e);}else if(u>0.){float D=clamp(.5+.5*(S-e)/u,0.,1.);s=lerp(M,s,D);if(!k)e=f(S,e,u);}else{float D=clamp(.5+.5*(-S-e)/u,0.,1.);s=lerp(M,s,D);if(!k)e=c(S,e,u);if(D<.5)x=r;}}return e;}float s(float3 i,float y,out int x,out float3 e,int4 z){float s=1e+10;e=float3(1.,1.,1.);int u=0;for(int r=0;r<numSolids;++r){if(!c(z,r)){continue;}u+=1;float M=solidsBlend[r];float3 k=solidsColor[r];float S=computeClayDistanceFunction(solidsType[r],i,solidsPos[r],solidsRot[r],solidsScale[r],solidsAttrs[r]);if(S<s)x=r;if(M==0.)s=min(S,s);else if(M>0.)s=f(S,s,M);else s=c(S,s,M);}float D=float(u-1)/float(numSolids-1);e=lerp(float3(0.,0.,1.),float3(1.,0.,0.),D);return s;}float3 s(int i){int c=(i&255)>>0,f=(i&65280)>>8,s=(i&16711680)>>16;return float3(c/255.,f/255.,s/255.);}bool r(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}void r(float3 i,float y,int s,int4 x,float z){float e=y*.5,r=e*.5,D=chunkSize/s,M=chunkSize*.5;for(uint S=0;S<8;++S){float3 k=cardinalCellOffset[S],u=float3(i.x+r*k.x,i.y+r*k.y,i.z+r*k.z),t=float3(round((u.x+M-r)/D),round((u.y+M-r)/D),round((u.z+M-r)/D));int n=f(t.x,t.y,t.z,s);float m=c(u+chunkCenter,e,n,x,z+e);if(abs(m)<e)chunkCell[n]=int2(0,1);}}void i(float3 f,float c,int i,int4 s,float e){float y=c*.5,M=y*.5;float3 S;for(uint z=0;z<8;++z){float3 k=cardinalCellOffset[z];S.x=f.x+M*k.x;S.y=f.y+M*k.y;S.z=f.z+M*k.z;r(S,y,i,s,e);}}float i(int4 f){float e=0.;for(int i=0;i<numSolids;++i){if(!c(f,i)){continue;}e+=abs(solidsBlend[i]);}return e;}[numthreads(4,4,4)]void compute0(int3 s:SV_DispatchThreadID){float e=chunkSize/4,z=e*.5;float3 u=float3(e*s.x-e-z,e*s.y-e-z,e*s.z-e-z);int x=f(s.x,s.y,s.z,4);int4 y=int4(-1,-1,-1,-1);float M=i(y),r=c(u+chunkCenter,e,x,y,M+e);if(abs(r)<e)chunkCell[x]=int2(1,0),solidsFilterIn[x]=solidsFilterOut[x],solidsFilterOut[x]=int4(-1,-1,-1,-1);}float3 i(int3 f,float i){float e=i*.5,z=chunkSize*.5;float3 s=float3(i*f.x-z,i*f.y-z,i*f.z-z)+e;return s;}[numthreads(4,4,4)]void compute2(int3 s:SV_DispatchThreadID){int e=f(s.x,s.y,s.z,4);if(chunkCell[e].x==1){chunkCell[e]=int2(0,0);float z=chunkSize/4;float3 c=i(s,z);int4 y=solidsFilterIn[e];float D=i(y);i(c,z,16,y,D);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void compute4(int3 s:SV_DispatchThreadID){int e=f(s.x,s.y,s.z,16);if(chunkCell[e].x==1){chunkCell[e]=int2(0,0);float z=chunkSize/16;float3 c=i(s,z);int4 y=solidsFilterIn[e];float D=i(y);i(c,z,64,y,D);}}void i(float3 i,float c,int4 e){float y=c*.5,z=y*.5,D=chunkSize/256,M=chunkSize*.5;for(uint r=0;r<8;++r){float3 k=cardinalCellOffset[r],u=float3(i.x+z*k.x,i.y+z*k.y,i.z+z*k.z),S=float3(round((u.x+M-z)/D),round((u.y+M-z)/D),round((u.z+M-z)/D));int x=0;float3 t=float3(1.,1.,1.);
#if DEBUGFILTERS
float m=s(u+chunkCenter,y,x,t,e);
#else
float n=f(u+chunkCenter,y,x,t,e);
#endif
if(abs(n)<c){int d=f(S.x,S.y,S.z,256);chunkOutData[d]=float3(n,f(t),x+1);}}}void r(float3 f,float c,int4 s){float y=c*.5,e=y*.5;for(uint r=0;r<8;++r){float3 k=cardinalCellOffset[r],x=float3(f.x+e*k.x,f.y+e*k.y,f.z+e*k.z);i(x,y,s);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void compute6(int3 s:SV_DispatchThreadID){int e=f(s.x,s.y,s.z,64);if(chunkCell[e].x==1){float z=chunkSize/64;float3 y=i(s,z);int4 c=solidsFilterIn[e];r(y,z,c);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cache6(int3 i:SV_DispatchThreadID){int e=f(i.x,i.y,i.z,64);if(chunkCell[e].y==1)chunkCell[e]=int2(1,0),solidsFilterIn[e]=solidsFilterOut[e],solidsFilterOut[e]=int4(-1,-1,-1,-1);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cache4(int3 i:SV_DispatchThreadID){int e=f(i.x,i.y,i.z,16);if(chunkCell[e].y==1)chunkCell[e]=int2(1,0),solidsFilterIn[e]=solidsFilterOut[e],solidsFilterOut[e]=int4(-1,-1,-1,-1);}void r(float3 i,float c){float e=c*.5,z=e*.5,s=chunkSize/256,M=chunkSize*.5;for(uint r=0;r<8;++r){float3 k=cardinalCellOffset[r],u=float3(i.x+z*k.x,i.y+z*k.y,i.z+z*k.z);int3 y=float3(round((u.x+M-z)/s),round((u.y+M-z)/s),round((u.z+M-z)/s));int x=f(y.x,y.y,y.z,256);chunkOutData[x].z=0.;}}void d(float3 i,float c){float f=c*.5,e=f*.5;for(uint z=0;z<8;++z){float3 s=cardinalCellOffset[z],y=float3(i.x+e*s.x,i.y+e*s.y,i.z+e*s.z);r(y,f);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void clearChunkData(int3 s:SV_DispatchThreadID){int e=f(s.x,s.y,s.z,64);if(chunkCell[e].x==1){chunkCell[e].x=0;float z=chunkSize/64;float3 y=i(s,z);d(y,z);}}float t(float f,float c){float i=c-f,s=.5;if(i!=0.)s=f/i;return s;}float2 d(float2 c){float2 e=c.xy>=0.?1.:-1.,s=(1.-abs(c.yx))*e;return s;}float t(float2 i){int e=2048;float c=floor(i.x*(e-1)),s=floor(i.y*(e-1)),f=c*e+s;return f;}float m(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:d(f.xy);f.xy=f.xy*.5+.5;float e=t(f.xy);return e;}int c(uint f,uint y,uint c,uint e){int s=f<<24|y<<16|c<<8|e;return s;}float u(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void m(int3 i,float e){int s=f(i.x,i.y,i.z,256);float3 y=chunkOutData[s];if(y.z==0.){return;}float l[8];int r=0;for(int z=0;z<8;++z){int3 M=i+localGridCellCoords[z];int x=f(M.x,M.y,M.z,256);float3 k=chunkOutData[x];if(k.z==0.){return;}l[z]=k.x;if(k.x<=0.)r|=1<<z;}int k=cubeEdgeFlags[r];if(k==0){return;}float3 x=i;int S=r*16,M[3]={triangleConnectionTable[S+3],triangleConnectionTable[S+4],triangleConnectionTable[S+5]};float3 D=float3(0,0,0),n[3];int d;for(d=0;d<3;++d){int g=M[d];float a=l[edgeConnection[g].x],o=l[edgeConnection[g].y],w=t(a,o);float3 v=x+(vertexOffset[edgeConnection[g].x]-w*edgeDirection[g])*e;n[d]=v;D+=v;}float3 a=cross(n[2]-n[0],n[1]-n[0]);if(abs(a.x+a.y+a.z)>0.){D/=3.;float3 g=(D-x)/e;uint o=uint(u(g));float v=m(normalize(a));int w=y.y,h=y.z,C=chunkOutPoints.IncrementCounter();chunkOutPoints[C]=int4(c(i.x,i.y,i.z,h),o,v,w);}}void u(float3 i,float c){float f=c*.5,e=f*.5,s=chunkSize/256,M=chunkSize*.5;for(uint r=0;r<8;++r){float3 k=cardinalCellOffset[r],u=float3(i.x+e*k.x,i.y+e*k.y,i.z+e*k.z);int3 y=float3(round((u.x+M-e)/s),round((u.y+M-e)/s),round((u.z+M-e)/s));if(y.y<255)m(y,f);}}void e(float3 i,float c){float f=c*.5,e=f*.5;for(uint r=0;r<8;++r){float3 s=cardinalCellOffset[r],y=float3(i.x+e*s.x,i.y+e*s.y,i.z+e*s.z);u(y,f);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void genPointCloud(int3 s:SV_DispatchThreadID){int r=f(s.x,s.y,s.z,64);if(chunkCell[r].x==1){float z=chunkSize/64;float3 y=i(s,z);e(y,z);}}[numthreads(1,1,1)]void debugDisplayGridPoints(int3 s:SV_DispatchThreadID){
#if DEBUGGRIDPOINTS
int e=f(s.x,s.y,s.z,debugGridSideCount);if(chunkCell[e].y!=0.){int r=debugGridOutPoints.IncrementCounter();chunkCell[e]=int2(0,0);float z=chunkSize/debugGridSideCount;debugGridOutPoints[r]=i(s,z)+chunkCenter;}
#endif
}float4 e(uint i){int e=(i&255)>>0,s=(i&65280)>>8,f=(i&16711680)>>16;return float4(e/255.,s/255.,f/255.,1.);}void k(int3 s,float c){int r=f(s.x,s.y,s.z,256);float3 y=chunkOutData[r];if(y.z==0.){return;}float l[8];int x=0;for(int z=0;z<8;++z){int3 u=s+localGridCellCoords[z];int k=f(u.x,u.y,u.z,256);float3 M=chunkOutData[k];if(M.z==0.){return;}l[z]=M.x;if(M.x<=0.)x|=1<<z;}int u=cubeEdgeFlags[x];if(u==0){return;}float3 k=i(s,c)+chunkCenter,M[12];for(int S=0;S<12;++S){if((u&1<<S)!=0){float D=l[edgeConnection[S].x],o=l[edgeConnection[S].y],n=t(D,o);M[S]=k+(vertexOffset[edgeConnection[S].x]-n*edgeDirection[S])*c;}}int n[16]={-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},D=x*16;for(int d=0;d<5;++d){int g=3*d;if(triangleConnectionTable[D+g]>=0){uint m=meshOutIndices.IncrementCounter();for(int a=0;a<3;++a){int o=triangleConnectionTable[D+g+a],v=n[o];if(v==-1)v=meshOutPoints.IncrementCounter(),n[o]=v;int w=y.y;meshOutPoints[v]=M[o];meshOutColors[v]=e(w);meshOutIndices[m][2-a]=v+outMeshIndexOffset;}}}}void n(float3 i,float c){float f=c*.5,e=f*.5,s=chunkSize/256,M=chunkSize*.5;for(uint r=0;r<8;++r){float3 y=cardinalCellOffset[r],u=float3(i.x+e*y.x,i.y+e*y.y,i.z+e*y.z);int3 z=float3(round((u.x+M-e)/s),round((u.y+M-e)/s),round((u.z+M-e)/s));k(z,f);}}void S(float3 i,float c){float f=c*.5,e=f*.5;for(uint r=0;r<8;++r){float3 s=cardinalCellOffset[r],y=float3(i.x+e*s.x,i.y+e*s.y,i.z+e*s.z);n(y,f);}}[numthreads(4,4,4)]void genMesh(int3 s:SV_DispatchThreadID){int e=f(s.x,s.y,s.z,64);if(chunkCell[e].x==1){float z=chunkSize/64;float3 y=i(s,z);S(y,z);}}